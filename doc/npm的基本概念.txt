*npm简介：
·npm：
  -- node package manager，即node的包管理工具
  -- 随着其它构建工具(webpack、browserify)的发展，"node package manager"已经变成了"package manager for JavaScript"
·背景： 
  -- 为啥我们需要一个包管理工具呢？因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载。
  -- 更重要的是，如果我们要使用模块A，而模块A又依赖于模块B，模块B又依赖于模块X和模块Y，npm可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。
·作用：
  -- 安装、管理和分享JavaScript包
  -- 会自动处理多个包之间的依赖
  -- 管理包的版本
·官网：https://www.npmjs.com/
·常用命令：./npm的常用命令.txt

*npm包的安装：
·npm安装依赖包的2种方式：
  -- 全局安装：npm install gulp -g 或 npm install gulp --global
  -- 本地安装：npm install gulp 或 npm install gulp --save-dev
     -- save代表把你的安装包信息写入package.json文件。npm 5.0.0之前，有--save参数才会把模块写入到packages.json，但现在已经是内置参数，可以不用额外写了
     -- dev代表把安装信息写入devDependencies中，没有dev则写入dependencies中
        -- devDependencies：开发环境依赖
        -- dependencies：生产环境依赖
·全局安装和本地安装的区别：
  -- 全局：可以使用npm root -g查看全局安装目录，一般在C:\Users\Administrator\node_modules下。用户可以在命令行中直接运行该组件包支持的命令。
  -- 本地：将安装包放在 ./node_modules 下(运行npm时所在的目录，可以通过cd命令调整目录)。通过require() 来引入本地安装的包。注意：npm的原理大概就是从当前目录往上找，找到哪个目录有node_modules就认为这才是真正的项目目录，所以东西全给装那里面去.所以你得保证从你当前的目录开始一直到根目录都没有node_modules，npm才会“正常”地把东西放到当前目录下的。所以本地没正确安装的办法就是①npm root找到其他安装了node_modules的文件夹，然后删除。②当然也可以先npm init再进行本地安装（推荐此种方法！）。
     -- 本地安装的优点：可以让每个项目拥有独立的包，不受全局包的影响，方便项目的移动、复制、打包等，保证不同版本包之间的相互依赖。另外，本地安装包对于项目的加载会更快。
     -- 本地安装的缺点：每次新项目都要本地安装所依赖的包，安装包时间相对较长，一来是包太大导致下载慢；二是浪费了硬盘空间。

*npm的数据源：
·cnpm和npm:
  -- cnpm：因为npm安装插件是从国外服务器下载，受网络影响大，淘宝在国内更新npm就是cnpm。
  -- cnpm安装方式：npm install cnpm -g --registry=https://registry.npm.taobao.org，安装后记得重启，不然容易错误。
  -- cnpm跟npm用法基本一致，只是在执行命令时将npm改为cnpm。
  -- cnpm安装时，不会自动创建lock文件


*npm的依赖包版本管理策略：
·npm采用语义化版本 (semver) 规范进行版本管理。版本格式：主版本号.次版本号.修订号，版本号递增规则如下：
  -- 主版本号：做了不兼容的 API 修改
  -- 次版本号：做了向下兼容的功能性新增，
  -- 修订号：做了向下兼容的问题修正。
·npm提供了网站 npm semver calculator（https://semver.npmjs.com/） ，可以方便地计算semver的匹配范围。下面列举一些规则示例：
  -- ^4.1.3：指定的主版本号下，所有更新的版本。又如^1.2.1 代表的更新版本范围为 >=1.2.1 && < 2.0.0
  -- ~4.1.3：指定的次版本号下，所有更新的版本。又如~1.2.1 代表的更新版本范围为 >=1.2.1 && < 1.3.0
  -- >4.1.3：版本号大于4.1.3
  -- <=4.3：版本号小于等于4.3
  -- 3.1.0 - 4.2.1：版本号在3.1.0到4.2.1之间
  -- >=3.3.1 <3.8.0：与逻辑，版本号大于等于3.3.1且小于3.8.0
  -- >4.3.1 || <=2.3.1：或逻辑，版本号大于4.3.1或小于等于2.3.1
  -- *：所有主版本
  -- 2或2.*或2.x：主版本号为2的所有版本
  -- 3.3或3.3.*或3.3.x：版本号为3.3开头的所有版本
  -- 5.0.0-alpha：预发布版本
  -- 7.0.0-beta.3：预发布版本
  -- 1.0.0-rc.3：预发布版本
·依赖包管理建议
  -- 使用npm5.2以上的版本，保留package-lock.json文件
  -- 不要手动修改package-lock.json
  -- 升级小版本依赖包：npm update <package>
  -- 升级大版本依赖包: npm install <package>@<version>
  -- 降级依赖包：npm install <package>@<version>
  -- 删除依赖包：npm uninstall <package>
  -- 当提交了package.json，package-lock.json的更新后，应及时拉取更新，并重新npm install重新安装更新后的依赖


*npm的历史版本：
·npm2采用的是递归安装的方法，当项目较复杂时，目录结构也会很深，会出现超出windows系统中路径超过260字符的错误；部分相同的依赖包也会被重复安装，造成大量冗余。
·npm3采用扁平结构优化解决了以上问题，但也导致了npm依赖树不能和文件结构所对应了，可以通过npm ls来查看模块间的依赖关系。
·npm5依然采用扁平结构，还引入了package-lock.json文件，它可以锁定依赖的安装结构和版本等信息。
·更多详情：./npm的设计缺陷.txt



*Q&A:
·公共模块在不同层级文件中被引用时，引入路径复杂，非常不方便，难维护，应当如何处理？
  本地包应用：为了更优雅的引用，可以利用npm本地包将公共模块封装到node_modules中。
·使用一个npm包时发现它有bug，也找出了它的问题，并直接在node_modules中修复了它，这样并没有用。因为在.gitignore文件一般会忽略提交node_modules，即node_modules不在版本控制内，即使修复了它，下次下载依赖是还是会覆盖修复。如何处理？
  先在git仓库中fork要修复的npm包，然后在自己的仓库中修复该问题，最后在package.json中引用自己的git url即可解决问题。
·npm如何安装同一个包的多个版本：
  -- npm i <alias>@npm:<packageName>@版本
  -- 实例：
      npm i antd3@npm:antd@3
      npm i antd4@npm:antd@4
·npm install发生了什么？
  https://www.zhihu.com/question/66629910
·npm包的缓存机制：
  https://blog.csdn.net/daihaoxin/article/details/105749014
