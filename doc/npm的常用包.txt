* 各npm包依赖库中可查看


* chalk：
  · 简介：改变console的颜色
  · 实例：
    ~ console.log(chalk.red('  Build failed with errors.\n'))
    ~ console.log(chalk.yellow('  Build complete.\n'))

* picocolors
  · 简介：与chalk类似，但是更轻、更快

* prompts && enquirer && inquirer
  · 简介：
    ~ 3者都是用来 实现命令行交互式界面的工具
    ~ inquirer下载量相对最大

* cac：
  · 简介：
    ~ cac 是一个用于构建 CLI 应用程序的 JavaScript 库；通俗点讲，就是给你的 cli 工具增加自定义一些命令，例如 vite create，后面的 create 命令就是通过 cac 来增加的
    ~ 为什么不用 commander or yargs ？主要是cac更轻、更易学、更强大


* npm-run-all：
  · 简介：可以并行、或者按顺序执行多个 npm 脚本
  · 例子： 
    ~ npm-run-all clean lint build    // 依次执行这三个任务命令
    ~ npm-run-all --parallel lint build   // 同时执行这两个任务命令
    ~ npm-run-all -s a b -p c d   // 先串行执行 a 和 b, 再并行执行 c 和 d



* minimist：
  · 简介：一个命令行参数解析工具
  · 例子： 
    // 基本使用
    var parseArgs = require('minimist');
    var argv = parseArgs(args, opts={});
    // 执行以下命令
    node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
    // 将获得
    { _: [ 'foo', 'bar', 'baz' ],
      x: 3,
      y: 4,
      n: 5,
      a: true,
      b: true,
      c: true,
      beep: 'boop' }
      


* ora
  · 简介：用于在node端显示加载中的效果，类似于前端页面的loading效果。
  · 实例：
    const spinner = ora('Loading unicorns').start();
    setTimeout(() => {
        spinner.color = 'yellow';
        spinner.text = 'Loading rainbows';
    }, 1000);

* rimraf：
  · 简介：node使用rimraf来删除文件和文件夹的，不管文件夹是否为空，都可删除。典型用法是webpack build时，删除dist文件夹
  · 实例：
    rimraf('./test.txt', function (err) { // 删除当前目录下的 test.txt
      console.log(err);
    });

* Semver
  · 简介：Semver是一个专门分析Semantic Version（语义化版本）的工具，“semver”其实就是这两个单词的缩写。Npm使用了该工具来处理版本相关的工作。semver可以作为一个node模块，同时也可以作为一个命令行工具。功能包括：
    ~ 比较两个版本号的大小
    ~ 验证某个版本号是否合法
    ~ 提取版本号，例如从“=v1.2.1”体取出"1.2.1"
    ~ 分析版本号是否属于某个范围或符合一系列条件
    ~ 等等...
  · 实例：
    // 计较两个版本号的大小
    semver.gt('1.2.3', '2.3.4') // false
    semver.lt('1.2.3', '2.3.4') // true
    // 验证版本号是否合法，返回null即不合法
    semver.valid('1.2.3') // '1.2.3'
    semver.valid('a.b.c') // null
    // 提取版本号
    semver.clean('  =v1.2.3   ') // '1.2.3'
    semver.major('1.2.3') // '1'
    semver.minor('1.2.3') // '2'
    semver.patch('1.2.3') // '3'

* Shelljs：
  · 简介：这个库能够让我们在js文件中执行shell命令，官网：https://github.com/shelljs/shelljs
  · 例子：github提交文件
    shell.exec('git add .');
    shell.exec("git commit -m 'autocommit'")
    shell.exec('git push')
  · 文档：
    ~ 《用shelljs实现前端部署自动化》：https://segmentfault.com/a/1190000016054416

* magic-string:
  · 简介：比如Vite中大量运用magic-string，这个库做一些字符串的魔术替换，这个库的目的就是在一些轻量级替换源代码的场景中替代AST这种过于庞大的解决方案
  · 例子：
    var MagicString = require('magic-string')
    var s = new MagicString('problems = 99')
    // 替换 problems -> answer
    s.overwrite(0, 8, 'answer')
    s.toString() // 'answer = 99'
    // 生成 sourcemap
    var map = s.generateMap({
      source: 'source.js',
      file: 'converted.js.map',
      includeContent: true
    })

* fast-glob：
  · 简介： 
    它是Node.js的一个非常快速和高效的glob库。这个包提供了遍历文件系统的方法，并根据Unix Bash shell使用的规则(经过一些简化)返回与指定模式的定义集相匹配的路径名，同时结果以任意顺序返回。快速、简单、有效。
  · 例子： 
    const fg = require('fast-glob');
    const entries = await fg(['.editorconfig', '**/index.js'], { dot: true });
  · 文档：https://www.npmjs.com/package/fast-glob


* debug：
  · 简介：一个模仿Node.js核心调试技术的小型JavaScript调试程序，在适用于Node.js和Web浏览器都可使用


* dotenv：
  · 简介：一个零依赖模块，可将.env文件中的环境变量加载到process.env中

* esbuild： 
  · 简介：esbuild是一个基于Go语言开发的JavaScript打包工具，被Vite用于开发环境的依赖解析；相比传统的打包工具，主打性能优势，在构建速度上可以快10~100倍；
  

* chokidar：
  · 简介：一款专门用于文件监控的库
  · 例如：
    const chokidar = require('chokidar');
    const watcher = chokidar.watch('file, dir, glob, or array', {
      ignored: /(^|[\/\\])\../,
      persistent: true
    });
    watcher
      .on('add', path => console.log(`File ${path} has been added`))
      .on('change', path => console.log(`File ${path} has been changed`))
      .on('unlink', path => console.log(`File ${path} has been removed`))
      .on('addDir', path => console.log(`Directory ${path} has been added`))
      .on('unlinkDir', path => console.log(`Directory ${path} has been removed`))
      .on('error', error => console.log(`Watcher error: ${error}`))
      .on('ready', () => console.log('Initial scan complete. Ready for changes'))
      .on('all', (event, path) => console.log(event,path))
      .on('raw', (event, path, details) => {
        log('Raw event info:', event, path, details);
      });


* portfinder
  · 简介：当你默认8080端口被占用时，它会重新绑定一个8081端口。
  · 例子：
    portfinder.basePort = process.env.PORT || config.dev.port
    portfinder.getPort((err, port) => {
      if (err) {
        reject(err)
      } else {
        process.env.PORT = port
        devWebpackConfig.devServer.port = port
        devWebpackConfig.plugins.push(new FriendlyErrorsPlugin({
          compilationSuccessInfo: {
            messages: [`Your application is running here: http://${devWebpackConfig.devServer.host}:${port}`],
          },
          onErrors: config.dev.notifyOnErrors
          ? utils.createNotifierCallback()
          : undefined
        }))
        resolve(devWebpackConfig)
      }
    })

* webpack-merge
  · 简介：它允许连接数组并合并对象，而不是覆盖组合。
  · 例子：
    const merge = require("webpack-merge");
    merge(
        {a : [1],b:5,c:20},
        {a : [2],b:10, d: 421}
    )
    //合并后的结果
    {a : [1,2] ,b :10 , c : 20, d : 421}
  · 文档：https://www.cnblogs.com/wangtong111/p/11197313.html

* extract-text-webpack-plugin：
  · 简介：一个webpack插件，主要是为了抽离css样式,防止将样式打包在js中引起页面样式加载错乱的现象;该插件有三个参数意义分别如下：
    ~ use:指需要什么样的loader去编译文件,这里由于源文件是.css所以选择css-loader
    ~ fallback:是指编译失败后用什么loader来提取css文件
    ~ publicfile:用来覆盖项目路径,生成该css文件的文件路径
  · 例子：
    const ExtractTextPlugin = require("extract-text-webpack-plugin");
    module.exports = {
      module: {
        rules: [
          {
            test: /\.css$/,
            use: ExtractTextPlugin.extract({
              fallback: "style-loader",
              use: "css-loader"
            })
          }
        ]
      },
      plugins: [
        new ExtractTextPlugin("styles.css"),
      ]
    }

* optimize-css-assets-webpack-plugin
  · 简介：压缩单独的css文件
  · 例子：
    const optimizeCss = require('optimize-css-assets-webpack-plugin');
    plugins: [
        new optimizeCss()
    ]

* uglifyjs-webpack-plugin
  · 简介：UglifyJS Webpack Plugin插件用来缩小（压缩优化）js文件，至少需要Node v6.9.0和Webpack v4.0.0版本。
  · 例子：
    const UglifyJsPlugin = require('uglifyjs-webpack-plugin');
    module.exports = {
      optimization: {
        minimizer: [new UglifyJsPlugin()],
      },
    };


* html-webpack-plugin
  · 简介：一个webpack插件，html-webpack-plugin可以根据你设置的模板，在每次运行后生成对应的模板文件，同时所依赖的CSS/JS也都会被引入，如果CSS/JS中含有hash值，则html-webpack-plugin生成的模板文件也会引入正确版本的CSS/JS文件。
  · 例子：
    module.exports = {
        plugins: [
            new htmlWebpackPlugin({
                title: "this is title", //用于生成的HTML文档的标题。
                filename: "index.html", // 生成的模板文件的名字 默认index.html
                template: "index.html", //模板来源文件
                inject: false, //注入位置'head','body',true,false
                favicon: "", //指定页面图标
                minify: {
                    caseSensitive: false, ////是否大小写敏感
                    collapseBooleanAttributes: true, //是否简写boolean格式的属性如：disabled="disabled" 简写为disabled 
                    collapseWhitespace: true //是否去除空格
                },
                hash: true, //是否生成hash添加在引入文件地址的末尾，类似于我们常用的时间戳，这个可以避免缓存带来的麻烦
                cache: true, //是否需要缓存，如果填写true，则文件只有在改变时才会重新生成
                showErrors: true, //是否将错误信息写在页面里，默认true，出现错误信息则会包裹在一个pre标签内添加到页面上
                chunks: ['a', 'b'], //引入的a,b模块，这里指定的是entry中设置多个js时，在这里指定引入的js，如果不设置则默认全部引入,数组形式传入
                chunksSortMode: "auto", //引入模块的排序方式
                excludeChunks: ['a', 'b'], //排除的模块,引入的除a,b模块以外的模块，与chunks相反
                xhtml: false //生成的模板文档中标签是否自动关闭，针对xhtml的语法，会要求标签都关闭，默认false
            })
        ]
    };

* friendly-errors-webpack-plugin
  · 简介：一个webpack插件，Friendly-errors-webpack-plugin识别某些类别的webpack错误，并清理，聚合和优先级，以提供更好的开发人员体验。
  · 例子：
    var FriendlyErrorsWebpackPlugin = require('friendly-errors-webpack-plugin');  
    var webpackConfig = {   // ...   plugins: [     new FriendlyErrorsWebpackPlugin(),   ],   // ... }



* copy-webpack-plugin 
  · 简介：静态文件拷贝
  · 例子：
    new CopyWebpackPlugin([
        {
          from:__dirname+'/public/lib',
          to:__dirname+'/build/lib'
        }
    ])














































